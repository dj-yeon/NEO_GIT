package com.hdh.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.commons.io.FilenameUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.hdh.dao.IDao;
import com.hdh.dao.IFinanceDao;
import com.hdh.service.CompanyregisterService;
import com.hdh.service.iFinanceService;
import com.hdh.vo.ExcelVo;
import com.hdh.vo.FinanceVo;
import com.hdh.vo.UserVo;

@Controller
public class FinanceController {

	@Autowired
	iFinanceService financeService;

	@Autowired
	CompanyregisterService companyregisterService;

	@RequestMapping("/finance")
	public String finance(Model model, HttpSession session) {

		UserVo Vo = new UserVo();
		Vo.setId((String)session.getAttribute("id"));

		model.addAttribute("companyList", companyregisterService.doCompanyList(Vo));

		return "finance";
	}

	@RequestMapping("/insertFinance.do")
	@ResponseBody
	public void insertFinancedo (FinanceVo Vo) {
		financeService.insertFinance(Vo);
	}

	/** Excel 업로드 기능  */
	@RequestMapping("/excelupload.do")
	@ResponseBody
	public void readExcel(@RequestParam("file") MultipartFile file) throws IOException {

		List<ExcelVo> dataList = new ArrayList<>();

		String extension = FilenameUtils.getExtension(file.getOriginalFilename());

		if (!extension.equals("xlsx") && !extension.equals("xls")) {
			throw new IOException("엑셀파일만 업로드 해주세요.");
		}

		Workbook workbook = null;

		if (extension.equals("xlsx")) {
			workbook = new XSSFWorkbook(file.getInputStream());
		} else if (extension.equals("xls")) {
			workbook = new HSSFWorkbook(file.getInputStream());
		}

		Sheet worksheet = workbook.getSheetAt(0);

		// 최상단 공백이 있을때 : + 1
		int cnt = (worksheet.getPhysicalNumberOfRows() + 1);

		for (int i = 2; i < cnt; i++) {

			Row row = worksheet.getRow(i);

			ExcelVo data = new ExcelVo();
			DataFormatter formatter = new DataFormatter();

			String industrialClassificationCode = formatter.formatCellValue(row.getCell(1));
			String majorCommodity = formatter.formatCellValue(row.getCell(2));
			String increaseSales = formatter.formatCellValue(row.getCell(3));
			String earningsRatioSalesOperation = formatter.formatCellValue(row.getCell(4));
			String equityCapitalRatio = formatter.formatCellValue(row.getCell(5));
			String interestCoverageRatio = formatter.formatCellValue(row.getCell(6));
			String turnoverRateAccountsReceivable = formatter.formatCellValue(row.getCell(7));

			data.setIndustrialClassificationCode(industrialClassificationCode);
			data.setMajorCommodity(majorCommodity);
			data.setIncreaseSales(increaseSales);
			data.setEarningsRatioSalesOperation(earningsRatioSalesOperation);
			data.setEquityCapitalRatio(equityCapitalRatio);
			data.setInterestCoverageRatio(interestCoverageRatio);
			data.setTurnoverRateAccountsReceivable(turnoverRateAccountsReceivable);

			if(industrialClassificationCode != "" && majorCommodity != "" && increaseSales != "" && earningsRatioSalesOperation != "" && equityCapitalRatio != "" && interestCoverageRatio != "" && turnoverRateAccountsReceivable != "") {
				dataList.add(data);
				financeService.insertcorporateManagementAnalysis(data);
			}


		}

		// financeService.insertExcel(dataList);

	}
}
